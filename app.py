# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/160bSeSKd1FlyOsglEwHraIiCQ9OuwUoe
"""

import streamlit as st
import numpy as np
from gauss_solver import gauss_elimination, back_substitution, verify_solution

st.set_page_config(page_title="Gaussian Elimination Solver", layout="centered")

st.title("Gaussian Elimination Solver")
st.markdown("Enter the number of equations, then fill in the matrix values or load an example.")

# Step 1: User selects the number of equations
n = st.number_input(" Number of equations:", min_value=2, max_value=10, step=1, value=3)

# Step 2: Option to load a sample example
if st.button(" Load Example"):
    A = np.array([[0, 2, 1],
                  [1, -2, -3],
                  [3, -1, 2]], dtype=float)
    b = np.array([8, -11, -3], dtype=float)
else:
    st.subheader(" Coefficient matrix A:")
    A = np.zeros((n, n))
    for i in range(n):
        cols = st.columns(n)
        for j in range(n):
            A[i, j] = cols[j].number_input(f"A[{i+1},{j+1}]", key=f"A-{i}-{j}", value=0.0, format="%.4f")

    st.subheader(" Right-hand side vector b:")
    b = np.zeros(n)
    for i in range(n):
        b[i] = st.number_input(f"b[{i+1}]", key=f"b-{i}", value=0.0, format="%.4f")

# Step 3: Solve button
if st.button(" Solve"):
    st.subheader(" Gaussian Elimination Steps:")
    Ab = gauss_elimination(A.copy(), b.copy())

    if Ab is not None:
        x = back_substitution(Ab)
        if x is not None:
            st.subheader(" Final Solution:")
            for i in range(n):
                st.write(f"x{i+1} = {x[i]:.4f}")

            # Step 4: Optional verification
            if st.button("üîç Verify Solution (A * x ‚âà b)"):
                st.subheader("üîé Solution Verification:")
                verify_solution(A, b, x)
        else:
            st.error(" Back substitution failed: zero pivot encountered.")
    else:
        st.error(" Gaussian elimination failed: system may not have a unique solution.")