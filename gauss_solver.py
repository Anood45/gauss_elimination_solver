# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CstSjC_jt8YcTYUwP6MllhbZNWe-OcIz
"""

import numpy as np

# A is the coefficients term and b is the constant term
def gauss_elimination(A, b):
    # number of rows
    n = len(A)
     # The matrix of coefficients augmented with the right-hand side vector
    Ab = np.hstack((A.astype(float), b.reshape(-1, 1).astype(float)))

    for i in range(n):
        pivot = Ab[i, i]

        # Check if the pivot is zero (or very small)
        if abs(pivot) < 1e-12:
            for k in range(i + 1, n):
                if abs(Ab[k, i]) > 1e-12:
                    # Swap rows
                    Ab[[i, k]] = Ab[[k, i]]
                    print(f"Swapped row {i} with row {k} due to zero pivot.")
                    pivot = Ab[i, i]
                    break
            else:
                print(f"Error: No valid pivot found at row {i}. The system may not have a unique solution.")
                return None

        # Eliminate elements below the pivot
        for j in range(i + 1, n):
            factor = Ab[j, i] / pivot
            Ab[j, i:] -= factor * Ab[i, i:]
            print(f"Row {j} updated by eliminating below pivot at row {i} with factor {factor:.4f}")

    return Ab


#Ab is the Upper Triangular Matrix
def back_substitution(Ab):
    #number of rows
    n = Ab.shape[0]
    #An array to save the solutions
    x = np.zeros(n)
    #start from the last row
    for i in range(n - 1, -1, -1):
        if abs(Ab[i, i]) < 1e-12:
            print(f"Error: Zero pivot at row {i}. Cannot solve.")
            return None

        sum_ax = np.dot(Ab[i, i+1:n], x[i+1:n])
        x[i] = (Ab[i, -1] - sum_ax) / Ab[i, i]

        print(f"x[{i}] = {x[i]:.4f}")

    return x


#Optional: Solution verification
def verify_solution(A, b, x):
    Ax = np.dot(A, x)
    print("\n Recomputed Ax:")
    print(Ax)
    print("\n Original b:")
    print(b)

# Example
if __name__ == "__main__":
    A = np.array([[0, 2, 1],
                  [1, -2, -3],
                  [3, -1, 2]])
    b = np.array([8, -11, -3])

    Ab = gauss_elimination(A, b)
    if Ab is not None:
        x = back_substitution(Ab)
        if x is not None:
            print("\n Final solution vector x:")
            print(x)

            verify_solution(A, b, x)